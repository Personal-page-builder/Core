import type { TreeItem } from '@nuxt/ui'

interface FileNode {
  name: string
  type: 'file' | 'directory'
  path: string
  children?: FileNode[]
}

interface ContentStructure {
  success: boolean
  data: FileNode[]
}

interface Panel {
  id: 'left' | 'right'
  mode: 'edit' | 'preview'
  locale: string
  currentFile: string | null
  title: string
  content?: string
  loading?: boolean
  error?: string | null
}

export const useEditorController = defineStore('editorController', () => {
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  const showNavigation = ref(true)
  const fixedNavigation = ref(false)
  
  // –õ–æ–∫–∞–ª–∏
  const currentLocale = ref('en')
  const showDualLocale = ref(false)
  const primaryLocale = ref('en')
  
  // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
  const showPreview = ref(false)
  
  // –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
  const currentFile = ref<string | null>(null)
  
  // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
  const activePanel = ref<'left' | 'right'>('left')
  
  // –ü–∞–Ω–µ–ª–∏
  const leftPanel = ref<Panel>({
    id: 'left',
    mode: 'edit',
    locale: 'en',
    currentFile: null,
    title: '',
    content: '',
    loading: false,
    error: null
  })
  
  const rightPanel = ref<Panel>({
    id: 'right',
    mode: 'preview',
    locale: 'en',
    currentFile: null,
    title: '',
    content: '',
    loading: false,
    error: null
  })

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
  const availablePanels = computed(() => {
    const panels: ('left' | 'right')[] = ['left']
    if (showDualLocale.value) {
      panels.push('right')
    }
    return panels
  })

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏
  watch(showDualLocale, (newValue) => {
    if (!newValue && activePanel.value === 'right') {
      // –ï—Å–ª–∏ –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏ –æ–Ω–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–µ–≤—É—é
      activePanel.value = 'left'
    }
  })

  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const structure = ref<FileNode[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  const fetchStructure = async () => {
    loading.value = true
    error.value = null
    
    try {
      const response = await $fetch<ContentStructure>('/api/content/structure')
      structure.value = response.data
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', err)
    } finally {
      loading.value = false
    }
  }

  const convertToTreeItems = (nodes: FileNode[]): TreeItem[] => {
    return nodes.map(node => {
      const item: TreeItem = {
        label: node.name,
        value: node.path,
        icon: node.type === 'directory' ? 'i-lucide-folder' : 'i-lucide-file',
        defaultExpanded: node.type === 'directory'
      }

      if (node.children && node.children.length > 0) {
        item.children = convertToTreeItems(node.children)
      }

      return item
    })
  }

  const treeItems = computed(() => {
    return convertToTreeItems(structure.value)
  })

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
  const toggleNavigation = () => {
    showNavigation.value = !showNavigation.value
  }

  const toggleFixedNavigation = () => {
    fixedNavigation.value = !fixedNavigation.value
  }

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—è–º–∏
  const setCurrentLocale = (locale: string) => {
    currentLocale.value = locale
  }

  const toggleDualLocale = () => {
    showDualLocale.value = !showDualLocale.value
  }

  const setPrimaryLocale = (locale: string) => {
    primaryLocale.value = locale
  }

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
  const togglePreview = () => {
    showPreview.value = !showPreview.value
  }

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
  const setCurrentFile = (filePath: string | null) => {
    currentFile.value = filePath
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const loadMarkdownContent = async (panelId: 'left' | 'right', filePath: string, locale: string) => {
    console.log('üöÄ EditorController: –ó–∞–≥—Ä—É–∑–∫–∞ markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    console.log('üìã –ü–∞–Ω–µ–ª—å:', panelId)
    console.log('üìÅ –§–∞–π–ª:', filePath)
    console.log('üåç –õ–æ–∫–∞–ª—å:', locale)
    
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    
    panel.loading = true
    panel.error = null
    
    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...')
      const response = await $fetch('/api/content/markdown', {
        query: {
          path: filePath,
          locale
        }
      })
      
      console.log('‚úÖ EditorController: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω')
      console.log('üìä –£—Å–ø–µ—Ö:', response.success)
      
      if (response.success && response.data) {
        console.log('üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª–∏–Ω–∞:', response.data.content.length)
        panel.content = response.data.content
        console.log('üíæ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–Ω–µ–ª—å:', panelId)
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', response.error)
        panel.error = response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
        panel.content = ''
      }
    } catch (err) {
      console.error('‚ùå EditorController: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ markdown:', err)
      panel.error = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'
      panel.content = ''
    } finally {
      panel.loading = false
      console.log('üèÅ EditorController: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏:', panelId)
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–∞–Ω–µ–ª–∏
  const updatePanelContent = (panelId: 'left' | 'right', content: string) => {
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    panel.content = content
  }

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—è–º–∏
  const setActivePanel = (panelId: 'left' | 'right') => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞
    if (availablePanels.value.includes(panelId)) {
      activePanel.value = panelId
    }
  }

  const setPanelMode = (panelId: 'left' | 'right', mode: 'edit' | 'preview') => {
    if (panelId === 'left') {
      leftPanel.value.mode = mode
    } else {
      rightPanel.value.mode = mode
    }
  }

  const setPanelLocale = (panelId: 'left' | 'right', locale: string) => {
    if (panelId === 'left') {
      leftPanel.value.locale = locale
    } else {
      rightPanel.value.locale = locale
    }
  }

  const setPanelFile = (panelId: 'left' | 'right', filePath: string | null) => {
    console.log('üîß setPanelFile –≤—ã–∑–≤–∞–Ω:', { panelId, filePath })
    
    if (panelId === 'left') {
      console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å:', filePath)
      leftPanel.value.currentFile = filePath
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      if (filePath) {
        loadMarkdownContent('left', filePath, leftPanel.value.locale)
      }
    } else {
      console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å:', filePath)
      rightPanel.value.currentFile = filePath
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      if (filePath) {
        loadMarkdownContent('right', filePath, rightPanel.value.locale)
      }
    }
    
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –ø–æ—Å–ª–µ setPanelFile:')
    console.log('   –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å:', leftPanel.value.currentFile)
    console.log('   –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å:', rightPanel.value.currentFile)
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
  const setActivePanelFile = (filePath: string | null) => {
    console.log('üéØ setActivePanelFile –≤—ã–∑–≤–∞–Ω:', { filePath, activePanel: activePanel.value })
    setPanelFile(activePanel.value, filePath)
  }

  const getPanelTitle = (panelId: 'left' | 'right'): string => {
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    if (panel.currentFile && typeof panel.currentFile === 'string') {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞
      return `${panel.mode} - ${panel.currentFile}`
    }
    return panel.mode
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
  const getUniqueFiles = computed(() => {
    const files = new Set<string | null>()
    if (leftPanel.value.currentFile) files.add(leftPanel.value.currentFile)
    if (rightPanel.value.currentFile) files.add(rightPanel.value.currentFile)
    return Array.from(files)
  })

  return {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    showNavigation,
    fixedNavigation,
    toggleNavigation,
    toggleFixedNavigation,
    
    // –õ–æ–∫–∞–ª–∏
    currentLocale,
    showDualLocale,
    primaryLocale,
    setCurrentLocale,
    toggleDualLocale,
    setPrimaryLocale,
    
    // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    showPreview,
    togglePreview,
    
    // –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    currentFile,
    setCurrentFile,
    
    // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
    activePanel,
    availablePanels,
    setActivePanel,
    setActivePanelFile,
    
    // –ü–∞–Ω–µ–ª–∏
    leftPanel,
    rightPanel,
    setPanelMode,
    setPanelLocale,
    setPanelFile,
    getPanelTitle,
    getUniqueFiles,
    loadMarkdownContent,
    updatePanelContent,
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    structure,
    loading,
    error,
    treeItems,
    fetchStructure
  }
}) 