import type { TreeItem } from '@nuxt/ui'

interface FileNode {
  name: string
  type: 'file' | 'directory'
  path: string
  children?: FileNode[]
}

interface ContentStructure {
  success: boolean
  data: FileNode[]
}

interface FileContent {
  path: string
  locale: string
  originalContent: string
  modifiedContent: string
  isModified: boolean
  lastModified: number
}

interface Panel {
  id: 'left' | 'right'
  mode: 'edit' | 'preview'
  locale: string
  currentFile: string | null
  title: string
  loading?: boolean
  error?: string | null
}

export const useEditorController = defineStore('editorController', () => {
  const showNavigation = ref(true)
  const fixedNavigation = ref(false)
  
  const currentLocale = ref('en')
  const showDualLocale = ref(false)
  const primaryLocale = ref('en')
  
  // TODO: Make preview interactive on client side
  const showPreview = ref(false)
  
  const currentFile = ref<string | null>(null)
  
  const activePanel = ref<'left' | 'right'>('left')
  
  const leftPanel = ref<Panel>({
    id: 'left',
    mode: 'edit',
    locale: 'en',
    currentFile: null,
    title: '',
    loading: false,
    error: null
  })
  
  const rightPanel = ref<Panel>({
    id: 'right',
    mode: 'preview',
    locale: 'en',
    currentFile: null,
    title: '',
    loading: false,
    error: null
  })

  const availablePanels = computed(() => {
    const panels: ('left' | 'right')[] = ['left']
    if (showDualLocale.value) {
      panels.push('right')
    }
    return panels
  })

  watch(showDualLocale, (newValue) => {
    if (!newValue && activePanel.value === 'right') {
      activePanel.value = 'left'
    }
  })

  const structure = ref<FileNode[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  const modifiedFiles = ref<Record<string, FileContent>>({})
  const hasUnsavedChanges = computed(() => Object.keys(modifiedFiles.value).length > 0)

  const fetchStructure = async () => {
    loading.value = true
    error.value = null
    
    const toast = useToast()
    const toastResult = toast.add({
      title: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
      description: '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...',
      color: 'info',
      icon: 'i-lucide-loader-2'
    })
    
    try {
      const response = await $fetch<ContentStructure>('/api/content/structure')
      structure.value = response.data
      
      toast.update(toastResult.id, {
        title: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
        description: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
        color: 'success',
        icon: 'i-lucide-check'
      })
    } catch (err) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', err)
      
      toast.update(toastResult.id, {
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        color: 'error',
        icon: 'i-lucide-x'
      })
    } finally {
      loading.value = false
    }
  }

  const convertToTreeItems = (nodes: FileNode[]): TreeItem[] => {
    return nodes.map(node => {
      const item: TreeItem = {
        label: node.name,
        value: node.path,
        icon: node.type === 'directory' ? 'i-lucide-folder' : 'i-lucide-file',
        defaultExpanded: node.type === 'directory'
      }

      if (node.children && node.children.length > 0) {
        item.children = convertToTreeItems(node.children)
      }

      return item
    })
  }

  const treeItems = computed(() => {
    return convertToTreeItems(structure.value)
  })

  const toggleNavigation = () => {
    showNavigation.value = !showNavigation.value
  }

  const toggleFixedNavigation = () => {
    fixedNavigation.value = !fixedNavigation.value
  }

  const setCurrentLocale = (locale: string) => {
    currentLocale.value = locale
  }

  const toggleDualLocale = () => {
    showDualLocale.value = !showDualLocale.value
  }

  const setPrimaryLocale = (locale: string) => {
    primaryLocale.value = locale
  }

  // TODO: Make preview interactive on client side
  const togglePreview = () => {
    showPreview.value = !showPreview.value
  }

  const setCurrentFile = (filePath: string | null) => {
    currentFile.value = filePath
  }

  const loadMarkdownContent = async (panelId: 'left' | 'right', filePath: string, locale: string) => {
    console.log('üöÄ EditorController: –ó–∞–≥—Ä—É–∑–∫–∞ markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    console.log('üìã –ü–∞–Ω–µ–ª—å:', panelId)
    console.log('üìÅ –§–∞–π–ª:', filePath)
    console.log('üåç –õ–æ–∫–∞–ª—å:', locale)
    
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    const fileKey = getFileKey(filePath, locale)
    
    const existingFile = modifiedFiles.value[fileKey]
    
    if (existingFile) {
      console.log('üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ñ–∞–π–ª–∞:', fileKey)
      panel.loading = false
      panel.error = null
      return
    }
    
    const toast = useToast()
    const toastResult = toast.add({
      title: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞',
      description: `–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ${filePath}...`,
      color: 'info',
      icon: 'i-lucide-loader-2'
    })
    
    panel.loading = true
    panel.error = null
    
    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...')
      const response = await $fetch('/api/content/markdown', {
        query: {
          path: filePath,
          locale
        }
      })
      
      console.log('‚úÖ EditorController: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω')
      console.log('üìä –£—Å–ø–µ—Ö:', response.success)
      
      if (response.success && response.data) {
        console.log('üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª–∏–Ω–∞:', response.data.content.length)
        
        const fileContent: FileContent = {
          path: filePath,
          locale,
          originalContent: response.data.content,
          modifiedContent: response.data.content,
          isModified: false,
          lastModified: Date.now()
        }
        modifiedFiles.value[fileKey] = fileContent
        
        toast.update(toastResult.id, {
          title: '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω',
          description: `${filePath} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`,
          color: 'success',
          icon: 'i-lucide-check'
        })
        
        console.log('üíæ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–Ω–µ–ª—å:', panelId)
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', response.error)
        panel.error = response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
        
        toast.update(toastResult.id, {
          title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
          description: response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª',
          color: 'error',
          icon: 'i-lucide-x'
        })
      }
    } catch (err) {
      console.error('‚ùå EditorController: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ markdown:', err)
      panel.error = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'
      
      toast.update(toastResult.id, {
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞',
        color: 'error',
        icon: 'i-lucide-x'
      })
    } finally {
      panel.loading = false
      console.log('üèÅ EditorController: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏:', panelId)
    }
  }

  const updatePanelContent = (panelId: 'left' | 'right', content: string) => {
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    
    if (panel.currentFile) {
      const fileKey = `${panel.currentFile}_${panel.locale}`
      const existingFile = modifiedFiles.value[fileKey]
      
      if (existingFile) {
        existingFile.modifiedContent = content
        existingFile.isModified = content !== existingFile.originalContent
        existingFile.lastModified = Date.now()
        modifiedFiles.value[fileKey] = existingFile
      } else {
        const fileContent: FileContent = {
          path: panel.currentFile,
          locale: panel.locale,
          originalContent: content,
          modifiedContent: content,
          isModified: false,
          lastModified: Date.now()
        }
        modifiedFiles.value[fileKey] = fileContent
      }
      
      console.log('üìù –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω:', fileKey, '–ò–∑–º–µ–Ω–µ–Ω:', existingFile?.isModified || false)
    }
  }

  const getFileKey = (filePath: string, locale: string): string => {
    const fileKey = `${filePath}_${locale}`
    console.log('üîë getFileKey:', { filePath, locale, fileKey })
    return fileKey
  }

  const isFileModified = (filePath: string, locale: string): boolean => {
    const fileKey = getFileKey(filePath, locale)
    const fileContent = modifiedFiles.value[fileKey]
    const isModified = fileContent?.isModified || false
    
    console.log('üîç isFileModified:', {
      filePath,
      locale,
      fileKey,
      fileContent: fileContent ? 'exists' : 'not found',
      isModified
    })
    
    return isModified
  }

  const revertFileChanges = (filePath: string, locale: string) => {
    const fileKey = getFileKey(filePath, locale)
    const fileContent = modifiedFiles.value[fileKey]
    
    if (fileContent) {
      fileContent.modifiedContent = fileContent.originalContent
      fileContent.isModified = false
      fileContent.lastModified = Date.now()
      modifiedFiles.value[fileKey] = fileContent
      
      console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–∞—á–µ–Ω—ã –¥–ª—è —Ñ–∞–π–ª–∞:', fileKey)
    }
  }

  const saveFile = async (fileContent: FileContent) => {
    const toast = useToast()
    const toastResult = toast.add({
      title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞',
      description: '–§–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...',
      color: 'info',
      icon: 'i-lucide-loader-2'
    })
    
    try {
      const response = await $fetch<{ success: boolean }>('/api/content/markdown', {
        method: 'PUT',
        body: {
          path: fileContent.path,
          locale: fileContent.locale,
          content: fileContent.modifiedContent
        }
      })
      
      if (response.success) {
        toast.update(toastResult.id, {
          title: '–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
          description: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
          color: 'success',
          icon: 'i-lucide-check'
        })
        return true
      } else {
        toast.update(toastResult.id, {
          title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª',
          color: 'error',
          icon: 'i-lucide-x'
        })
        return false
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err)
      toast.update(toastResult.id, {
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞',
        color: 'error',
        icon: 'i-lucide-x'
      })
      return false
    }
  }

  const saveAllChanges = async () => {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π...')
    
    const toast = useToast()
    const modifiedFilesCount = Object.values(modifiedFiles.value).filter(file => file.isModified).length
    
    if (modifiedFilesCount === 0) {
      toast.add({
        title: '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        description: '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        color: 'info',
        icon: 'i-lucide-info'
      })
      return
    }
    
    const toastResult = toast.add({
      title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
      description: `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ${modifiedFilesCount} —Ñ–∞–π–ª(–æ–≤)...`,
      color: 'info',
      icon: 'i-lucide-loader-2'
    })
    
    let successCount = 0
    let errorCount = 0
    
    for (const [fileKey, fileContent] of Object.entries(modifiedFiles.value)) {
      if (fileContent.isModified) {
        const success = await saveFile(fileContent)
        
        if (success) {
          fileContent.originalContent = fileContent.modifiedContent
          fileContent.isModified = false
          fileContent.lastModified = Date.now()
          modifiedFiles.value[fileKey] = fileContent
          successCount++
          
          console.log('‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', fileKey)
        } else {
          errorCount++
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', fileKey)
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º toast —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if (errorCount === 0) {
      toast.update(toastResult.id, {
        title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        description: `–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${successCount} —Ñ–∞–π–ª(–æ–≤)`,
        color: 'success',
        icon: 'i-lucide-check'
      })
    } else if (successCount === 0) {
      toast.update(toastResult.id, {
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ${errorCount} —Ñ–∞–π–ª(–æ–≤)`,
        color: 'error',
        icon: 'i-lucide-x'
      })
    } else {
      toast.update(toastResult.id, {
        title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        description: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫: ${errorCount}`,
        color: 'warning',
        icon: 'i-lucide-alert-triangle'
      })
    }
    
    console.log('üèÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
  }

  const setActivePanel = (panelId: 'left' | 'right') => {
    if (availablePanels.value.includes(panelId)) {
      activePanel.value = panelId
    }
  }

  const setPanelMode = (panelId: 'left' | 'right', mode: 'edit' | 'preview') => {
    if (panelId === 'left') {
      leftPanel.value.mode = mode
    } else {
      rightPanel.value.mode = mode
    }
  }

  const setPanelLocale = (panelId: 'left' | 'right', locale: string) => {
    const toast = useToast()
    
    if (panelId === 'left') {
      leftPanel.value.locale = locale
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ localStorage –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∏
      if (leftPanel.value.currentFile) {
        const fileKey = getFileKey(leftPanel.value.currentFile, locale)
        const existingFile = modifiedFiles.value[fileKey]
        
        if (!existingFile) {
          console.log('üîÑ –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∏:', locale)
          toast.add({
            title: '–°–º–µ–Ω–∞ —è–∑—ã–∫–∞',
            description: `–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª–∏ ${locale}...`,
            color: 'info',
            icon: 'i-lucide-loader-2'
          })
          loadMarkdownContent('left', leftPanel.value.currentFile, locale)
        } else {
          toast.add({
            title: '–°–º–µ–Ω–∞ —è–∑—ã–∫–∞',
            description: `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${locale}`,
            color: 'success',
            icon: 'i-lucide-check'
          })
        }
      }
    } else {
      rightPanel.value.locale = locale
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ localStorage –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∏
      if (rightPanel.value.currentFile) {
        const fileKey = getFileKey(rightPanel.value.currentFile, locale)
        const existingFile = modifiedFiles.value[fileKey]
        
        if (!existingFile) {
          console.log('üîÑ –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞–ª–∏:', locale)
          toast.add({
            title: '–°–º–µ–Ω–∞ —è–∑—ã–∫–∞',
            description: `–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª–∏ ${locale}...`,
            color: 'info',
            icon: 'i-lucide-loader-2'
          })
          loadMarkdownContent('right', rightPanel.value.currentFile, locale)
        } else {
          toast.add({
            title: '–°–º–µ–Ω–∞ —è–∑—ã–∫–∞',
            description: `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${locale}`,
            color: 'success',
            icon: 'i-lucide-check'
          })
        }
      }
    }
  }

  const setPanelFile = (panelId: 'left' | 'right', filePath: string | null) => {
    console.log('üîß setPanelFile –≤—ã–∑–≤–∞–Ω:', { panelId, filePath })
    
    if (panelId === 'left') {
      console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å:', filePath)
      leftPanel.value.currentFile = filePath
      if (filePath) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ localStorage –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
        const fileKey = getFileKey(filePath, leftPanel.value.locale)
        const existingFile = modifiedFiles.value[fileKey]
        
        if (!existingFile) {
          console.log('üìÑ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞')
          loadMarkdownContent('left', filePath, leftPanel.value.locale)
        } else {
          console.log('üìÑ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç')
        }
      }
    } else {
      console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å:', filePath)
      rightPanel.value.currentFile = filePath
      if (filePath) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ localStorage –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏
        const fileKey = getFileKey(filePath, rightPanel.value.locale)
        const existingFile = modifiedFiles.value[fileKey]
        
        if (!existingFile) {
          console.log('üìÑ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞')
          loadMarkdownContent('right', filePath, rightPanel.value.locale)
        } else {
          console.log('üìÑ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç')
        }
      }
    }
    
    console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –ø–æ—Å–ª–µ setPanelFile:')
    console.log('   –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å:', leftPanel.value.currentFile)
    console.log('   –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å:', rightPanel.value.currentFile)
  }

  const setActivePanelFile = (filePath: string | null) => {
    console.log('üéØ setActivePanelFile –≤—ã–∑–≤–∞–Ω:', { filePath, activePanel: activePanel.value })
    setPanelFile(activePanel.value, filePath)
  }

  const getPanelTitle = (panelId: 'left' | 'right'): string => {
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    if (panel.currentFile && typeof panel.currentFile === 'string') {
      return `${panel.mode} - ${panel.currentFile}`
    }
    return panel.mode
  }

  const getUniqueFiles = computed(() => {
    const files = new Set<string | null>()
    if (leftPanel.value.currentFile) files.add(leftPanel.value.currentFile)
    if (rightPanel.value.currentFile) files.add(rightPanel.value.currentFile)
    return Array.from(files)
  })

  const getFileContent = (filePath: string, locale: string): string => {
    const fileKey = getFileKey(filePath, locale)
    const fileContent = modifiedFiles.value[fileKey]
    return fileContent?.modifiedContent || ''
  }

  const getPanelContent = (panelId: 'left' | 'right'): string => {
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    if (!panel.currentFile) return ''
    return getFileContent(panel.currentFile, panel.locale)
  }

  const getPanelLoading = (panelId: 'left' | 'right'): boolean => {
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    return panel.loading || false
  }

  const getPanelError = (panelId: 'left' | 'right'): string | null => {
    const panel = panelId === 'left' ? leftPanel.value : rightPanel.value
    return panel.error || null
  }

  const createPageObject = (filePath: string, locale: string) => {
    const content = getFileContent(filePath, locale)
    if (!content) return null
    
    return {
      _path: filePath,
      _dir: filePath.split('/').slice(0, -1).join('/'),
      _draft: false,
      _partial: false,
      _empty: false,
      title: filePath.split('/').pop() || filePath,
      description: '',
      body: {
        type: 'root',
        children: [
          {
            type: 'element',
            tag: 'div',
            props: {},
            children: [
              {
                type: 'text',
                value: content
              }
            ]
          }
        ]
      },
      _id: filePath,
      _source: 'content',
      _file: filePath,
      _extension: 'md'
    }
  }

  return {
    showNavigation,
    fixedNavigation,
    toggleNavigation,
    toggleFixedNavigation,
    
    currentLocale,
    showDualLocale,
    primaryLocale,
    setCurrentLocale,
    toggleDualLocale,
    setPrimaryLocale,
    
    // TODO: Make preview interactive on client side
    showPreview,
    togglePreview,
    
    currentFile,
    setCurrentFile,
    
    activePanel,
    availablePanels,
    setActivePanel,
    setActivePanelFile,
    
    leftPanel,
    rightPanel,
    setPanelMode,
    setPanelLocale,
    setPanelFile,
    getPanelTitle,
    getUniqueFiles,
    loadMarkdownContent,
    updatePanelContent,
    isFileModified,
    revertFileChanges,
    saveAllChanges,
    saveFile,
    
    structure,
    loading,
    error,
    treeItems,
    fetchStructure,
    modifiedFiles,
    hasUnsavedChanges,
    getFileContent,
    getPanelContent,
    getPanelLoading,
    getPanelError,
    createPageObject
  }
}, {
  persist: true
}) 