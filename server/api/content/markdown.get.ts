import { readFile, stat } from 'fs/promises'
import { join } from 'path'
import { existsSync } from 'fs'

interface MarkdownResponse {
  success: boolean
  data?: {
    content: string
    path: string
    locale: string
  }
  error?: string
}

export default defineEventHandler(async (event): Promise<MarkdownResponse> => {
  try {
    const query = getQuery(event)
    const { locale = 'en', path } = query

    console.log('üì° API: –ó–∞–ø—Ä–æ—Å markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    console.log('üìÅ –ü—É—Ç—å:', path)
    console.log('üåç –õ–æ–∫–∞–ª—å:', locale)

    if (!path || typeof path !== 'string') {
      console.log('‚ùå API: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω')
      return {
        success: false,
        error: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω'
      }
    }

    if (!locale || typeof locale !== 'string') {
      console.log('‚ùå API: –Ø–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω')
      return {
        success: false,
        error: '–Ø–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω'
      }
    }

    // –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const contentPath = join(process.cwd(), 'content', locale, path)
    console.log('üìÇ API: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:', contentPath)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!existsSync(contentPath)) {
      console.log('‚ùå API: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', contentPath)
      return {
        success: false,
        error: `–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${contentPath}`
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞
    const stats = await stat(contentPath)
    if (!stats.isFile()) {
      console.log('‚ùå API: –ü—É—Ç—å –≤–µ–¥–µ—Ç –∫ –ø–∞–ø–∫–µ, –∞ –Ω–µ –∫ —Ñ–∞–π–ª—É:', contentPath)
      return {
        success: false,
        error: `–ü—É—Ç—å –≤–µ–¥–µ—Ç –∫ –ø–∞–ø–∫–µ: ${path}`
      }
    }

    console.log('‚úÖ API: –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...')
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const content = await readFile(contentPath, 'utf-8')
    console.log('üìÑ API: –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω, –¥–ª–∏–Ω–∞:', content.length)

    return {
      success: true,
      data: {
        content,
        path,
        locale
      }
    }

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ markdown —Ñ–∞–π–ª–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞'
    }
  }
}) 