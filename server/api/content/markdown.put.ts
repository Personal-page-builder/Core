import { writeFile, mkdir } from 'fs/promises'
import { join, dirname } from 'path'
import { existsSync } from 'fs'

interface MarkdownUpdateRequest {
  path: string
  locale: string
  content: string
}

interface MarkdownUpdateResponse {
  success: boolean
  data?: {
    path: string
    locale: string
    content: string
  }
  error?: string
}

export default defineEventHandler(async (event): Promise<MarkdownUpdateResponse> => {
  try {
    const body = await readBody<MarkdownUpdateRequest>(event)
    const { path, locale, content } = body

    console.log('üìù API: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ markdown —Ñ–∞–π–ª–∞')
    console.log('üìÅ –ü—É—Ç—å:', path)
    console.log('üåç –õ–æ–∫–∞–ª—å:', locale)
    console.log('üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', content.length)

    if (!path || typeof path !== 'string') {
      console.log('‚ùå API: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω')
      return {
        success: false,
        error: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω'
      }
    }

    if (!locale || typeof locale !== 'string') {
      console.log('‚ùå API: –Ø–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω')
      return {
        success: false,
        error: '–Ø–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω'
      }
    }

    if (!content || typeof content !== 'string') {
      console.log('‚ùå API: –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
      return {
        success: false,
        error: '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'
      }
    }

    // –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—É—Ç—å —É–∂–µ –ª–æ–∫–∞–ª—å
    const hasLocale = path.startsWith('en/') || path.startsWith('ru/')
    let finalPath: string
    
    if (hasLocale) {
      // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∫–∞–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
      finalPath = join(process.cwd(), 'content', path)
      console.log('üìÇ API: –ü—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∫–∞–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å')
    } else {
      // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
      finalPath = join(process.cwd(), 'content', locale, path)
      console.log('üìÇ API: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å –∫ –ø—É—Ç–∏')
    }
    
    console.log('üìÇ API: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:', finalPath)
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = dirname(finalPath)
    if (!existsSync(dir)) {
      console.log('üìÅ API: –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:', dir)
      await mkdir(dir, { recursive: true })
    }

    console.log('üíæ API: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª...')
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    await writeFile(finalPath, content, 'utf-8')
    console.log('‚úÖ API: –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

    return {
      success: true,
      data: {
        path,
        locale,
        content
      }
    }

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ markdown —Ñ–∞–π–ª–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞'
    }
  }
}) 