import { readdir, stat, readFile, mkdir } from 'fs/promises'
import { existsSync, createWriteStream, createReadStream } from 'fs'
import { join } from 'path'
import archiver from 'archiver'

interface MarkdownFile {
  path: string
  content: string
  locale: string
  mtime: Date
}

async function scanMarkdownFiles(dirPath: string, basePath: string = '', locale: string): Promise<MarkdownFile[]> {
  const items = await readdir(dirPath)
  const files: MarkdownFile[] = []

  for (const item of items) {
    const fullPath = join(dirPath, item)
    const relativePath = join(basePath, item)
    const stats = await stat(fullPath)

    if (stats.isDirectory()) {
      const children = await scanMarkdownFiles(fullPath, relativePath, locale)
      files.push(...children)
    } else if (item.endsWith('.md')) {
      const content = await readFile(fullPath, 'utf-8')
      files.push({
        path: relativePath,
        content,
        locale,
        mtime: stats.mtime
      })
    }
  }

  return files
}

async function shouldRebuildArchive(): Promise<boolean> {
  const exportPath = join(process.cwd(), '.data', 'export_md.zip')
  
  // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
  if (!existsSync(exportPath)) {
    return true
  }

  try {
    const archiveStats = await stat(exportPath)
    const contentPath = join(process.cwd(), 'content')
    const locales = ['en', 'ru']

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ markdown —Ñ–∞–π–ª—ã –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for (const locale of locales) {
      const localePath = join(contentPath, locale)
      if (existsSync(localePath)) {
        const files = await scanMarkdownFiles(localePath, '', locale)
        
        for (const file of files) {
          // –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å
          if (file.mtime > archiveStats.mtime) {
            console.log(`üì¶ API: –§–∞–π–ª ${file.path} –∏–∑–º–µ–Ω–µ–Ω, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∞—Ä—Ö–∏–≤`)
            return true
          }
        }
      }
    }

    return false
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error)
    return true
  }
}

async function buildArchive(): Promise<void> {
  console.log('üì¶ API: –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ markdown —Ñ–∞–π–ª–æ–≤')
  
  const contentPath = join(process.cwd(), 'content')
  const exportDir = join(process.cwd(), '.data')
  const exportPath = join(exportDir, 'export_md.zip')
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É .data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!existsSync(exportDir)) {
    await mkdir(exportDir, { recursive: true })
  }

  const locales = ['en', 'ru']
  const allFiles: MarkdownFile[] = []

  // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ª–æ–∫–∞–ª–∏
  for (const locale of locales) {
    const localePath = join(contentPath, locale)
    if (existsSync(localePath)) {
      const files = await scanMarkdownFiles(localePath, '', locale)
      allFiles.push(...files)
    }
  }

  console.log(`üì¶ API: –ù–∞–π–¥–µ–Ω–æ ${allFiles.length} markdown —Ñ–∞–π–ª–æ–≤`)

  // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
  const archive = archiver('zip', {
    zlib: { level: 9 }
  })

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
  const output = createWriteStream(exportPath)
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞—Ä—Ö–∏–≤ –∫ –ø–æ—Ç–æ–∫—É
  archive.pipe(output)

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤
  for (const file of allFiles) {
    const archivePath = `${file.locale}/${file.path}`
    archive.append(file.content, { name: archivePath })
  }

  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  await new Promise<void>((resolve, reject) => {
    output.on('close', () => {
      console.log('‚úÖ API: –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
      resolve()
    })
    
    archive.on('error', (err) => {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞:', err)
      reject(err)
    })
    
    archive.finalize()
  })
}

export default defineEventHandler(async (event) => {
  try {
    console.log('üì¶ API: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∞')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∞—Ä—Ö–∏–≤
    const needsRebuild = await shouldRebuildArchive()
    
    if (needsRebuild) {
      await buildArchive()
    } else {
      console.log('üì¶ API: –ê—Ä—Ö–∏–≤ –∞–∫—Ç—É–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π')
    }

    const exportPath = join(process.cwd(), '.data', 'export_md.zip')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!existsSync(exportPath)) {
      throw createError({
        statusCode: 404,
        statusMessage: '–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      })
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    setHeader(event, 'Content-Type', 'application/zip')
    setHeader(event, 'Content-Disposition', 'attachment; filename="markdown-export.zip"')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    return sendStream(event, createReadStream(exportPath))

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error)
    throw createError({
      statusCode: 500,
      statusMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞'
    })
  }
}) 