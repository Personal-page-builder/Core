import { writeFile, mkdir, readdir, unlink, rmdir, stat } from 'fs/promises'
import { join } from 'path'
import { existsSync } from 'fs'
import unzipper from 'unzipper'

export default defineEventHandler(async (event) => {
  try {
    console.log('üì¶ API: –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç markdown —Ñ–∞–π–ª–æ–≤')
    
    const body = await readBody(event)
    const { files } = body

    if (!files || !Array.isArray(files) || files.length === 0) {
      throw createError({
        statusCode: 400,
        statusMessage: '–§–∞–π–ª—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
      })
    }

    const contentPath = join(process.cwd(), 'content')
    
    // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É content
    console.log('üßπ API: –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É content')
    if (existsSync(contentPath)) {
      await clearDirectory(contentPath)
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    await mkdir(join(contentPath, 'en'), { recursive: true })
    await mkdir(join(contentPath, 'ru'), { recursive: true })

    let importedCount = 0

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const file of files) {
      if (file.name && file.content) {
        try {
          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º file.content
          let buffer: Buffer
          
          if (file.content instanceof Uint8Array) {
            buffer = Buffer.from(file.content)
          } else if (Array.isArray(file.content)) {
            buffer = Buffer.from(file.content)
          } else if (typeof file.content === 'string') {
            buffer = Buffer.from(file.content, 'base64')
          } else {
            console.error('‚ùå API: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø file.content:', typeof file.content)
            continue
          }
          
          // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP
          const directory = await unzipper.Open.buffer(buffer)
          
          for (const entry of directory.files) {
            if (entry.type === 'File' && entry.path.endsWith('.md')) {
              const content = await entry.buffer()
              const filePath = entry.path
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å –∏–∑ –ø—É—Ç–∏
              const pathParts = filePath.split('/')
              const locale = pathParts[0] // en –∏–ª–∏ ru
              
              if (locale === 'en' || locale === 'ru') {
                // –£–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å –∏–∑ –ø—É—Ç–∏
                const relativePath = pathParts.slice(1).join('/')
                const fullPath = join(contentPath, locale, relativePath)
                
                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                const dirPath = join(contentPath, locale, pathParts.slice(1, -1).join('/'))
                if (dirPath !== join(contentPath, locale)) {
                  await mkdir(dirPath, { recursive: true })
                }
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
                await writeFile(fullPath, content, 'utf-8')
                importedCount++
                
                console.log(`üìÑ API: –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${filePath}`)
              }
            }
          }
        } catch (error) {
          console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error)
        }
      }
    }

    console.log(`‚úÖ API: –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} —Ñ–∞–π–ª–æ–≤`)

    return {
      success: true,
      message: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} —Ñ–∞–π–ª–æ–≤`,
      importedCount
    }

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error)
    throw createError({
      statusCode: 500,
      statusMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–æ–≤'
    })
  }
})

async function clearDirectory(dirPath: string) {
  const items = await readdir(dirPath)
  
  for (const item of items) {
    const fullPath = join(dirPath, item)
    const stats = await stat(fullPath)
    
    if (stats.isDirectory()) {
      await clearDirectory(fullPath)
      await rmdir(fullPath)
    } else {
      await unlink(fullPath)
    }
  }
} 