import { mkdir } from 'fs/promises'
import { join } from 'path'
import { existsSync } from 'fs'
import sharp from 'sharp'
import { randomUUID } from 'crypto'

interface UploadResponse {
  success: boolean
  data?: {
    filename: string
    originalName: string
    size: number
    width: number
    height: number
  }
  error?: string
}

export default defineEventHandler(async (event): Promise<UploadResponse> => {
  try {
    console.log('üì∏ API: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    
    const body = await readBody(event)
    const { image, originalName } = body

    if (!image || !originalName) {
      throw createError({
        statusCode: 400,
        statusMessage: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      })
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const publicDir = join(process.cwd(), 'public')
    const galleryDir = join(publicDir, 'gallery')
    const thumbnailsDir = join(publicDir, 'gallery', 'thumbnails')

    if (!existsSync(galleryDir)) {
      await mkdir(galleryDir, { recursive: true })
    }
    if (!existsSync(thumbnailsDir)) {
      await mkdir(thumbnailsDir, { recursive: true })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileId = randomUUID()
    const filename = `${fileId}.webp`
    const thumbnailFilename = `${fileId}_thumb.webp`

    // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    const fullImagePath = join(galleryDir, filename)
    const thumbnailPath = join(thumbnailsDir, thumbnailFilename)

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ –±—É—Ñ–µ—Ä
    let imageBuffer: Buffer
    if (typeof image === 'string') {
      // –£–±–∏—Ä–∞–µ–º data:image/...;base64, –µ—Å–ª–∏ –µ—Å—Ç—å
      const base64Data = image.replace(/^data:image\/[a-z]+;base64,/, '')
      imageBuffer = Buffer.from(base64Data, 'base64')
    } else if (Array.isArray(image)) {
      imageBuffer = Buffer.from(image)
    } else {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const metadata = await sharp(imageBuffer).metadata()
    
    if (!metadata.width || !metadata.height) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ webp
    await sharp(imageBuffer)
      .webp({ quality: 90 })
      .toFile(fullImagePath)

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é (—Å–∂–∞—Ç–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    await sharp(imageBuffer)
      .resize(300, 300, { 
        fit: 'inside',
        withoutEnlargement: true 
      })
      .webp({ quality: 70 })
      .toFile(thumbnailPath)

    console.log(`‚úÖ API: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${filename}`)

    return {
      success: true,
      data: {
        filename,
        originalName,
        size: imageBuffer.length,
        width: metadata.width,
        height: metadata.height
      }
    }

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    }
  }
}) 