import { readdir, stat } from 'fs/promises'
import { join } from 'path'
import { existsSync } from 'fs'

interface GalleryImage {
  id: string
  filename: string // URL –∫ –ø–æ–ª–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  thumbnail: string // URL –∫ –ø—Ä–µ–≤—å—é
  originalName: string
  size: number
  width: number
  height: number
  uploadedAt: string
}

interface ListResponse {
  success: boolean
  data?: GalleryImage[]
  error?: string
}

export default defineEventHandler(async (): Promise<ListResponse> => {
  try {
    console.log('üì∏ API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    
    const galleryDir = join(process.cwd(), 'public', 'gallery')
    const thumbnailsDir = join(process.cwd(), 'public', 'gallery', 'thumbnails')

    if (!existsSync(galleryDir)) {
      return {
        success: true,
        data: []
      }
    }

    const files = await readdir(galleryDir)
    const imageFiles = files.filter(file => 
      file.endsWith('.webp') && !file.includes('_thumb')
    )

    const images: GalleryImage[] = []

    for (const filename of imageFiles) {
      try {
        const filePath = join(galleryDir, filename)
        const stats = await stat(filePath)
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)
        const id = filename.replace('.webp', '')
        const thumbnail = `${id}_thumb.webp`
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é
        const thumbnailPath = join(thumbnailsDir, thumbnail)
        const thumbnailExists = existsSync(thumbnailPath)

        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const baseUrl = process.env.NODE_ENV === 'production' 
          ? 'https://your-domain.com' 
          : 'http://localhost:3000'

        images.push({
          id,
          filename: `${baseUrl}/gallery/${filename}`, // URL –∫ –ø–æ–ª–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
          thumbnail: thumbnailExists 
            ? `${baseUrl}/gallery/thumbnails/${thumbnail}` 
            : `${baseUrl}/gallery/${filename}`, // Fallback –∫ –ø–æ–ª–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
          originalName: filename, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ –ë–î
          size: stats.size,
          width: 0, // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ sharp.metadata()
          height: 0,
          uploadedAt: new Date(stats.mtime).toISOString() // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date
        })
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${filename}:`, err)
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    images.sort((a, b) => new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime())

    console.log(`‚úÖ API: –ù–∞–π–¥–µ–Ω–æ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`)

    return {
      success: true,
      data: images
    }

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
    }
  }
}) 