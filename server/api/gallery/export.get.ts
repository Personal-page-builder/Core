import { readdir, readFile } from 'fs/promises'
import { join } from 'path'
import { existsSync } from 'fs'
import JSZip from 'jszip'

export default defineEventHandler(async (event) => {
  try {
    console.log('üì∏ API: –≠–∫—Å–ø–æ—Ä—Ç –≥–∞–ª–µ—Ä–µ–∏')
    
    const galleryDir = join(process.cwd(), 'public', 'gallery')
    const thumbnailsDir = join(process.cwd(), 'public', 'gallery', 'thumbnails')

    if (!existsSync(galleryDir)) {
      throw createError({
        statusCode: 404,
        statusMessage: '–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞'
      })
    }

    const zip = new JSZip()
    const files = await readdir(galleryDir)
    const imageFiles = files.filter(file => 
      file.endsWith('.webp') && !file.includes('_thumb')
    )

    if (imageFiles.length === 0) {
      throw createError({
        statusCode: 404,
        statusMessage: '–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞'
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ZIP
    for (const filename of imageFiles) {
      try {
        const filePath = join(galleryDir, filename)
        const fileContent = await readFile(filePath)
        zip.file(filename, fileContent)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const thumbnailName = filename.replace('.webp', '_thumb.webp')
        const thumbnailPath = join(thumbnailsDir, thumbnailName)
        if (existsSync(thumbnailPath)) {
          const thumbnailContent = await readFile(thumbnailPath)
          zip.file(`thumbnails/${thumbnailName}`, thumbnailContent)
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filename} –≤ ZIP:`, err)
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ZIP
    const zipBuffer = await zip.generateAsync({ type: 'nodebuffer' })

    console.log(`‚úÖ API: –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, ${imageFiles.length} —Ñ–∞–π–ª–æ–≤`)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    setHeader(event, 'Content-Type', 'application/zip')
    setHeader(event, 'Content-Disposition', 'attachment; filename="gallery-export.zip"')
    setHeader(event, 'Content-Length', zipBuffer.length)

    return zipBuffer

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≥–∞–ª–µ—Ä–µ–∏:', error)
    throw createError({
      statusCode: 500,
      statusMessage: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≥–∞–ª–µ—Ä–µ–∏'
    })
  }
}) 